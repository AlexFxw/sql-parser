#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 154
#define YY_END_OF_BUFFER 155
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1050] =
    {   0,
        0,    0,  151,  151,    2,    2,  155,  153,    4,    4,
      153,  153,  143,  149,  143,  143,  146,  143,  143,  143,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  143,  151,  152,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  138,    0,    1,  146,
      145,  144,  140,  139,  137,  141,  148,  148,  148,  148,

      148,  148,  120,  148,  121,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      122,  148,  148,  123,  124,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  125,  126,  127,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  128,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  142,  151,  150,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  147,  144,  106,  148,  107,  148,  148,  108,
      148,  109,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  110,  148,  132,  148,  148,  148,  148,  148,  148,

      148,  148,  148,  111,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  112,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  113,  148,
      148,  114,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  115,  148,  148,  116,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  117,
      148,  148,  148,  148,  118,  148,  148,  148,  148,  119,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  148,  148,  148,  148,  148,  148,   78,  148,

       79,   80,  148,  148,  148,  148,   81,  148,  148,  148,
      148,   82,  148,  148,  148,   83,   84,  148,  148,  148,
      148,  148,  148,  148,   85,  148,  148,   86,   87,  148,
      148,   88,  148,   89,  148,  131,  148,  148,  148,  148,
      148,  148,   90,  148,   91,   92,   93,  148,   95,  148,
       96,  148,  148,  148,  148,   97,  148,  148,  148,  148,
      148,   98,  148,  148,  148,  148,  148,  148,  148,  148,
      148,   99,  148,  148,  148,  148,  100,  101,  102,  135,
      148,  148,  148,  148,  148,  148,  148,  148,  103,  148,
      104,  148,  105,  134,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   58,   59,  148,   60,

      148,  148,  148,  148,  148,  148,   61,  148,  148,  148,
       62,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      136,   63,  148,  148,   64,  148,  148,   94,  148,   65,
       66,  148,  148,  148,  148,   67,   68,   69,   70,  148,
      133,  148,  148,  148,   71,   72,  148,  148,  148,  148,
      148,  148,   73,  148,  148,  148,  148,  148,   74,  148,
      148,  148,   75,  148,  148,  148,   76,  148,  148,  148,
       77,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  148,   33,  148,  148,
       34,  148,   35,  148,  148,   36,   37,  148,   38,   39,
       40,  148,   41,  148,  148,  148,   43,   44,  148,   45,
       46,  148,  148,   47,  130,  148,  148,   48,  148,  148,
      148,  148,   49,  148,   50,  129,   51,   52,  148,   53,
      148,  148,  148,   54,   55,   56,   57,  148,  148,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   15,   16,   17,   18,   19,  148,   20,  148,
       21,   22,   42,   23,   24,   25,  148,   26,  148,  148,
       27,   28,  148,  148,   29,   30,  148,  148,  148,   31,
       32,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      148,   11,  148,   12,  148,  148,   13,  148,  148,   14,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      148,    8,  148,  148,    9,   10,    2,    2,    2,    2,
        2,    2,    5,    6,    7,    2,    2,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1057] =
    {   0,
        0,    0,  470,  466,   67,    0,  470, 4162,  133,  135,
      428,    0, 4162, 4162,  131,  400,  133,  132,  387,  357,
      129,  129,  137,  135,  145,  196,  176,  184,  217,  124,
      141,  201,  213,  238,  255,  250,    0,  243,  269,  312,
      251,  191,  273,  144,  291,    0,  342,    0,  200,  212,
      332,  315,    0,    0,  212,  296,  207,  247,  291,  284,
      370,  437,  491,  543,  591,  643,  355,  301,  691,  300,
      266,  366,  429,  743,  791,  438,  367,  442,  841,  893,
      479,  537,  450,  388,  210,  333, 4162,  262, 4162,  338,
      245,  237, 4162, 4162, 4162, 4162,    0,  147,  178,  365,

      445,  195,  316,  481,    0,  371,  323,  491,  492,  306,
      488,  544,  360,  374,  381,  395,  417,  442,  544,  440,
      441,  473,  482,  497,  539,  539,  540,  548,  579,  536,
        0,  550,  576,  631,  585,  591,  576,  596,  593,  608,
      589,  598,  599,  594,  626,  635,  652,  648,    0,  652,
      637,  641,  659,  658,  687,  658,  690,  699,  684,  682,
      706,  706,  697,  726,  708,  701,  699,  697,  740,  743,
      742,  741,  749,  750,  736,  756, 4162,    0, 4162,    0,
      349,    0,  203,    0,  353,  190,  161,    0,    0,    0,
        0,  768,  783,  793,  822,  847,  785,  801,  857,  833,

      891,  887,  919,  855,  927,  921,  979,  929,  945,  957,
      981,  983,  991, 1041,  978, 1017, 1023, 1027, 1049, 1055,
     1053, 1071, 1087, 1085, 1093, 1095, 1119, 1124, 1173, 1129,
     1133, 1127, 1157, 1175, 1196, 1198, 1143, 1197, 1226, 1227,
     1228, 1240, 1229, 1231, 1265, 1266, 1270, 1284, 1294, 1315,
     1299, 1300, 1338, 1334, 1337, 1359, 1369, 1367, 1383, 1348,
     1370, 1388, 1404, 1421, 1412, 1423, 1433, 1436, 1437, 1462,
     1465,    0, 4162,  145,    0,  757,    0,  767,  789,    0,
      801,    0,  826,  836,  852,  937,  882,  915,  945,  977,
     1001,    0, 1019,    0, 1014, 1035, 1392, 1059, 1065, 1088,

     1144, 1148, 1207,    0, 1216, 1250, 1254, 1247, 1275, 1282,
     1282, 1305, 1310, 1349, 1365, 1435, 1447, 1429, 1463, 1470,
     1460, 1463, 1466, 1475, 1476, 1487, 1490, 1491, 1497, 1478,
     1486,    0, 1481, 1498, 1495, 1501, 1507, 1508, 1509, 1499,
     1501, 1503,    0, 1513, 1515, 1515, 1531, 1532, 1537, 1526,
     1525, 1531, 1540, 1545, 1529, 1542, 1548, 1539, 1550,    0,
     1533, 1537, 1538, 1547,    0, 1546, 1546, 1555, 1565,    0,
     1573, 1573, 1559, 1574, 1565, 1570, 1589, 1571, 1575, 1585,
     1590, 1582,    0,  140, 1599, 1603, 1604, 1607, 1608, 1618,
     1633, 1632, 1637, 1643, 1662, 1673, 1672, 1667, 1686, 1695,

     1697, 1703, 1705, 1707, 1729, 1735, 1726, 1739, 1740, 1757,
     1751, 1769, 1761, 1765, 1774, 1783, 1793, 1795, 1817, 1806,
     1811, 1814, 1827, 1828, 1849, 1859, 1863, 1862, 1865, 1877,
     1898, 1899, 1902, 1901, 1917, 1903, 1911, 1916, 1947, 1935,
     1952, 1933, 1956, 1939, 1965, 1990, 1977, 1991, 2005, 2006,
     2008, 2027, 2009, 2039, 2031, 2048, 2040, 2045, 2061, 2076,
     2079, 2093, 2077, 2098, 2107, 2111, 2082, 2132, 2110, 2116,
     2133, 2135, 2146, 2164, 2147, 2165, 2175, 2187, 2181, 2186,
     2200, 2219, 2205, 2230, 2235, 2221, 2218, 2249, 2259, 2272,
     2260, 2275, 1626, 1628, 1628, 1629, 1664, 1681,    0, 1720,

        0,    0, 1794, 1792, 1828, 1831,    0, 1860, 1857, 1953,
     1979,    0, 1989, 2011, 2057,    0,    0, 2145, 2159, 2156,
     2209, 2274, 2277, 2278,    0, 2268, 2280,    0,    0, 2293,
     2280,    0, 2284,    0, 2288,    0, 2303, 2291, 2290, 2300,
     2301, 2315,    0, 2314,    0,    0,    0, 2308,    0, 2317,
        0, 2326, 2318, 2324, 2316,    0, 2336, 2335, 2324, 2325,
     2331,    0, 2346, 2347, 2332, 2338, 2334, 2334, 2344, 2348,
     2360,    0, 2363, 2363, 2368, 2361,    0,    0, 2361,    0,
     2379, 2369, 2364, 2385, 2367, 2381, 2386, 2384,    0, 2372,
        0, 2389,    0,    0, 2399, 2411, 2400, 2401, 2417, 2422,

     2423, 2433, 2425, 2434, 2455, 2465, 2459, 2473, 2468, 2476,
     2491, 2489, 2517, 2499, 2527, 2528, 2522, 2530, 2533, 2551,
     2561, 2563, 2567, 2595, 2596, 2566, 2584, 2585, 2597, 2620,
     2621, 2629, 2626, 2630, 2645, 2635, 2651, 2639, 2660, 2670,
     2674, 2689, 2691, 2706, 2685, 2723, 2695, 2714, 2724, 2725,
     2727, 2748, 2739, 2749, 2763, 2781, 2760, 2765, 2793, 2779,
     2789, 2814, 2815, 2797, 2825, 2837, 2819, 2843, 2855, 2838,
     2869, 2847, 2873, 2879, 2881, 2887, 2892, 2903, 2897, 2905,
     2915, 2911, 2943, 2937, 2933, 2951, 2966, 2965, 2955, 2969,
     2977, 2987, 2991, 2995, 3000, 3001,    0,    0, 2370,    0,

     2435, 2440, 2472, 2485, 2487, 2508,    0, 2531, 2536, 2576,
        0, 2592, 2627, 2669, 2737, 2788, 2807, 2895, 2917, 2929,
        0,    0, 2959, 2972,    0, 2981, 2992,    0, 2994,    0,
        0, 3002, 3019, 3009, 3018,    0,    0,    0,    0, 3026,
        0, 3033, 3028, 3018,    0,    0, 3035, 3024, 3026, 3040,
     3041, 3039,    0, 3049, 3050, 3036, 3055, 3059, 3043, 3046,
     3046, 3067,    0, 3065, 3070, 3071,    0, 3059, 3078, 3079,
        0, 3077, 3079, 3087, 3083, 3085, 3089, 3095, 3111, 3113,
     3117, 3119, 3141, 3145, 3128, 3129, 3154, 3153, 3143, 3157,
     3167, 3171, 3183, 3195, 3207, 3208, 3211, 3217, 3216, 3220,

     3239, 3249, 3225, 3233, 3251, 3257, 3270, 3261, 3273, 3295,
     3274, 3279, 3283, 3291, 3305, 3307, 3313, 3328, 3324, 3323,
     3337, 3341, 3349, 3359, 3347, 3353, 3377, 3363, 3382, 3392,
     3401, 3414, 3415, 3403, 3432, 3431, 3437, 3427, 3436, 3466,
     3449, 3455, 3467, 3489, 3495, 3470, 3091,    0, 3176, 3202,
     3251, 3312,    0, 3395, 3380,    0,    0, 3400,    0,    0,
        0, 3426,    0, 3462, 3462, 3471,    0,    0, 3479,    0,
        0, 3487, 3501,    0,    0, 3496, 3509,    0, 3491, 3510,
     3491, 3510,    0, 3522, 3507,    0,    0,    0, 3516,    0,
     3528, 3529, 3514,    0,    0,    0,    0, 3518, 3527, 3535,

     3539, 3540, 3543, 3554, 3557, 3545, 3573, 3579, 3569, 3583,
     3607, 3588, 3597, 3602, 3611, 3613, 3619, 3636, 3641, 3625,
     3637, 3642, 3647, 3653, 3679, 3670, 3671, 3675, 3696, 3685,
     3687, 3709, 3693, 3701, 3733, 3711, 3727, 3735, 3737, 3739,
     3741, 3763, 3745, 3771, 3779, 3781, 3773, 3785, 3787, 3789,
     3804, 3815,    0,    0,    0,    0,    0, 3557,    0, 3570,
        0,    0,    0,    0,    0,    0, 3661,    0, 3737, 3803,
        0,    0, 3813, 3798,    0,    0, 3806, 3813, 3825,    0,
        0, 3827, 3833, 3837, 3839, 3841, 3867, 3845, 3855, 3856,
     3858, 3869, 3871, 3873, 3879, 3909, 3881, 3904, 3895, 3910,

     3912, 3913, 3935, 3921, 3925, 3953, 3961, 3927, 3943, 3958,
     3835,    0, 3904,    0, 3936, 3964,    0, 3945, 3956,    0,
     3983, 3975, 3984, 3986, 4001, 3989, 3997, 4007, 4012, 4015,
     4018,    0, 4005, 4006,    0,    0, 4029, 4037, 4038, 4053,
     4043, 4051,    0,    0,    0, 4055, 4061, 4066, 4162, 4131,
     4136,  135, 4141, 4146, 4151, 4156
    } ;

static const flex_int16_t yy_def[1057] =
    {   0,
     1049,    1, 1050, 1050, 1049,    5, 1049, 1049, 1049, 1049,
     1049, 1051, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1049, 1053, 1049, 1054, 1054, 1049,
     1054, 1055, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1056, 1056,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1054, 1049, 1049, 1051, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1049, 1053, 1049, 1054,
     1054, 1054, 1055, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1054, 1049, 1049, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1054, 1054,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1052, 1052, 1052, 1052, 1052, 1052,   62,   62,   62,   62,
       62,   62, 1052, 1052, 1052,   62,   62,   62,    0, 1049,
     1049, 1049, 1049, 1049, 1049, 1049
    } ;

static const flex_int16_t yy_nxt[4230] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  111,  384,
      106,  136,  112,  100,  274,  101,  113,  107,  137,  102,
      103,  176,  114,  275,  108,  115,  105,  109,  110,  116,
      384,  117,   98,  104,   99,  111,  118,  106,  136,  112,
      100,  119,  101,  113,  107,  137,  102,  103,  176,  114,
      275,  108,  115,  105,  109,  110,  116,  128,  117,  186,

      126,  181,   86,  118,  172,  129,  127,  383,  119,  120,
      276,  130,  173,   86,   86,  187,  185,  121,  138,  184,
      122,  185,  139,  123,  128,  281,  124,  126,  140,  125,
      141,  172,  129,  127,  142,  131,  120,  276,  130,  173,
      143,  132,  133,  134,  121,  138,  274,  122,  135,  139,
      123,  144,  281,  124,   91,  140,  125,  141,  188,  189,
      155,  142,  131,  152,  156,  145,  273,  143,  132,  133,
      134,  146,  147,  148,  153,  135,  272,  169,  144,  170,
      154,  149,  171,  232,  157,  150,  158,  155,  151,  159,
      152,  156,  145,  174,  175,  191,  160,  161,  146,  147,

      148,  153,  190,  192,  169,  186,  170,  154,  149,  171,
      232,  157,  150,  158,  223,  151,  159,  192,  192,  180,
      174,  175,  224,  160,  161,  162,  163,  231,  225,  164,
      192,  282,  165,  166,   86,   86,  287,  192,  192,  167,
      292,  223,  168,  182,  192,  192,   92,   90,  179,  224,
      181,   86,  162,  163,  231,  225,  164,  177,  282,  165,
      166,  187,  185,  287,  192,  192,  167,  292,   96,  168,
      180,  180,  192,  180,  180,  180,  180,  180,  180,  221,
      180,  180,  180,  233,  192,  222,  193,  234,  194,  277,
      299,  300,  192,  235,  195,  285,  196,  278,   95,  192,

      197,  198,  286,  192,  192,  271,  221,  301,  302,   91,
      233,  192,  222,  193,  234,  194,  277,  299,  300,  192,
      235,  195,  285,  196,  278,  192,  303,  197,  198,  286,
      192,  192,  271,  304,  301,  302,  180,  180,  180,   87,
      180,  180,  180,  180,  180,  180,  236,  180,  180,  180,
      237,  247,  192,  303,  199,  192,  238,  305,  279,  250,
      304,  280,  248,  251,  311,  312,  192,  192,  249, 1049,
      269,  270,   47,  236,  200,  192,   47,  237,  247,  192,
     1049,  199,  192,  238,  305,  279,  250,  192,  280,  248,
      251,  311,  312,  192,  192,  249,  192,  269,  270,  283,

      313,  200,  192,  180,  201,  264,  192,  265,  192,  290,
      266,  202,  314,  284,  192,  288,  192,  289,  203,  291,
      293,  204,  205,  192,  315,  294,  283,  313,  192, 1049,
     1049,  201,  264, 1049,  265,  192,  290,  266,  202,  314,
      284, 1049,  288,  192,  289,  203,  291,  293,  204,  205,
      267,  315,  294, 1049,  192,  192,  206,  295,  268,  306,
      207,  307,  296,  316,  208,  308,  317,  318,  297,  323,
      209,  324,  309,  210,  192,  298,  310,  267, 1049,  319,
      192,  192,  320,  206,  295,  268,  306,  207,  307,  296,
      316,  208,  308,  317,  318,  297,  323,  209,  324,  309,

      210,  192,  298,  310,  325,  321,  319,  192,  192,  320,
      322,  330,  331,  332,  333,  211,  334,  212,  335,  339,
     1049,  336,  213,  337,  340,  341,  342,  214,  192, 1049,
     1049,  325,  321, 1049,  338,  192, 1049,  322,  330,  331,
      332,  333,  211,  334,  212,  335,  339,  326,  336,  213,
      337,  340,  341,  342,  214,  192,  215,  327,  343,  344,
      192,  338,  328,  329,  216,  345,  346,  217,  347,  348,
      218,  349,  350,  219,  326,  351,  220,  356, 1049,  352,
      192, 1049, 1049,  215,  327,  343,  344,  192, 1049,  328,
      329,  216,  345,  346,  217,  347,  348,  218,  349,  350,

      219, 1049,  351,  220,  356,  353,  352,  192,  192,  226,
      357,  361,  362,  354,  358,  227,  228,  229,  355,  363,
      364,  365,  230,  359, 1049,  368,  369,  370,  192, 1049,
      371,  360,  353, 1049, 1049,  192,  226,  357,  361,  362,
      354,  358,  227,  228,  229,  355,  363,  364,  365,  230,
      359,  366,  368,  369,  370,  192,  239,  371,  360,  374,
      192,  372,  367,  375,  373,  376,  378,  380,  381,  382,
      240,  377, 1049, 1049,  493, 1049,  241,  242,  366,  379,
      192, 1049, 1049,  239,  494,  192,  374,  192,  372,  367,
      375,  373,  376,  378,  380,  381,  382,  240,  377,  385,

      192,  493,  192,  241,  242,  192,  379,  192,  192,  243,
      192,  494,  192,  495,  496,  391,  392,  244,  192, 1049,
      192,  245,  192, 1049,  246,  386,  385,  192,  192,  192,
      192, 1049,  192, 1049, 1049,  192,  243,  192,  192,  192,
      495,  496,  391,  392,  244,  192,  387,  192,  245,  192,
      192,  246,  386,  497,  388,  192,  252,  192,  253,  192,
      389,  254, 1049,  390,  192,  192,  192, 1049,  255,  256,
      192,  498,  400,  387,  192,  393,  499,  192,  192, 1049,
      497,  388,  401,  252,  192,  253,  192,  389,  254,  394,
      390,  192,  192, 1049,  192,  255,  256,  192,  498,  400,

      397,  192,  393,  499,  192,  192,  257,  258,  192,  401,
      259,  192,  502,  260,  261,  395,  394, 1049, 1049,  192,
      262,  192,  396,  263,  192, 1049, 1049,  397,  192, 1049,
      192,  192, 1049,  257,  258,  192,  192,  259,  192,  502,
      260,  261,  395,  398,  192,  399,  192,  262,  503,  396,
      263,  192,  500,  403,  501,  192,  192,  192,  404,  409,
      410,  402,  192,  192,  192,  192,  192, 1049, 1049, 1049,
      398,  192,  399,  192,  192,  503, 1049,  504,  411,  500,
      403,  501,  192,  192,  412,  404,  409,  410,  402,  192,
      505,  192,  405,  192,  192,  192,  192,  406,  192,  414,

      192,  192,  421,  407,  504,  411,  415, 1049,  192,  192,
      408,  412,  413, 1049, 1049,  192,  192,  505,  192,  405,
      192,  192,  192,  192,  406,  192,  414,  192,  192,  421,
      407, 1049,  506,  415,  192,  192,  507,  408,  508,  413,
      192,  422,  192,  192,  192,  192, 1049,  192,  509, 1049,
      423, 1049, 1049, 1049,  192,  192,  416,  424,  417,  506,
      192,  192,  418,  507,  192,  508,  192,  192,  422,  419,
      192,  192,  192,  420,  512,  509,  425,  423,  192,  426,
      427,  192,  513,  416,  424,  417,  192,  192,  192,  418,
      192,  192,  192,  192, 1049, 1049,  419,  192,  428,  192,

      420,  512,  192,  425,  192,  192,  426,  427,  192,  513,
      192,  431,  192,  192, 1049,  192,  432,  192,  429,  192,
      514,  430,  192, 1049,  192,  428,  433, 1049, 1049,  192,
      192,  192,  192, 1049, 1049,  192,  192,  192,  431,  192,
      434,  192, 1049,  432,  192,  429,  192,  514,  430,  192,
      192,  192,  435,  433,  441,  440,  192,  192,  515,  192,
      192,  192, 1049,  192,  442, 1049,  192,  434,  192,  450,
      192,  192, 1049,  192,  192,  443,  516,  192, 1049,  435,
      192,  441,  440,  192, 1049,  515, 1049,  192,  192,  436,
      192,  442,  192,  192,  192, 1049,  450,  192,  444,  437,

      445,  192,  443,  516,  438,  439, 1049,  192, 1049,  446,
      192,  447,  192,  192,  192,  192,  436,  192, 1049,  192,
     1049,  192,  448,  451,  517,  444,  437,  445,  449,  518,
     1049,  438,  439,  192,  192,  192,  446,  192,  447,  192,
      192,  192,  192,  192,  192,  192,  192,  456,  192,  448,
      451,  517,  454,  455, 1049,  449,  518,  192,  452,  453,
      192,  192,  192,  192,  192,  192,  192,  519,  192,  520,
      192,  192,  192,  192,  456,  192, 1049,  192,  521,  454,
      455,  457,  192,  192,  192,  452,  453,  192, 1049, 1049,
      192,  192,  192,  192,  519,  192,  520,  460,  458,  522,

      459,  192,  192,  192,  192,  521, 1049,  192,  457,  192,
      192,  461,  523,  524,  192,  462,  192,  192,  466, 1049,
      467,  192,  525,  526,  460,  458,  522,  459,  192,  192,
      192,  192,  192,  463,  192, 1049,  192,  192,  461,  523,
      524,  464,  462,  192,  192,  466,  465,  467,  192,  525,
      526,  192,  192,  468,  192,  192, 1049, 1049,  192,  192,
      463,  471,  469,  192,  192,  478,  527,  472,  464, 1049,
      470,  192,  473,  465,  192,  192,  192, 1049,  192,  192,
      468,  192,  192,  474,  192,  192,  192,  192,  471,  469,
      528,  475,  478,  527,  472,  479,  192,  470,  192,  473,

      192,  192,  192,  192,  192,  192,  192,  192,  476,  510,
      474,  192,  192,  192,  192, 1049,  480,  528,  475,  477,
      192,  192,  479,  192,  511,  192, 1049,  192,  484,  192,
     1049,  192,  192,  192,  192,  476,  510,  481,  192, 1049,
      192,  192,  482,  480,  485,  483,  477,  192,  192,  192,
      192,  511,  192,  488,  490,  484,  192,  486,  192,  529,
      192,  530,  531,  487,  481,  192,  489,  192,  192,  482,
      192,  485,  483,  192,  192, 1049,  192,  192,  492,  192,
      488,  490,  192,  532,  486,  192,  529,  192,  530,  531,
      487,  533,  534,  489,  491,  535,  536,  192,  537,  192,

      192,  192,  192,  538,  539,  492,  192,  540,  541,  192,
      532,  544,  545,  546,  542,  547,  548,  549,  533,  534,
      550,  491,  535,  536,  543,  537,  192,  551,  552,  192,
      538,  539,  553,  554,  540,  541,  555,  556,  544,  545,
      546,  542,  547,  548,  549,  557,  558,  550,  559,  560,
      561,  543,  562,  563,  551,  552,  564,  565,  566,  553,
      554,  567,  568,  555,  556,  569,  570,  571,  572,  573,
      574,  575,  557,  558,  576,  559,  560,  561,  577,  562,
      563,  578,  579,  564,  565,  566,  584,  585,  567,  568,
      580,  586,  569,  570,  571,  572,  573,  574,  575,  581,

      582,  576,  583,  587,  588,  577,  589,  590,  578,  579,
      593,  591,  594,  584,  585,  592,  192,  580,  586, 1049,
      595,  192, 1049, 1049,  596,  192,  581,  582, 1049,  583,
      587,  588,  597,  589,  590,  192,  192,  593,  591,  594,
      192,  192,  592,  192,  192,  192,  598,  595,  192,  192,
      192,  596,  192, 1049,  192,  192,  697, 1049,  698,  597,
      192, 1049,  192,  192,  599,  699,  700,  192,  192,  192,
      192,  192,  192,  598,  192, 1049,  192,  192,  600,  192,
      192,  192,  192,  697,  192,  698,  601,  192,  602,  192,
      603,  599,  699,  700,  701, 1049,  192,  192,  702,  192,

      605,  192,  604,  192,  192,  600,  192,  192,  607,  192,
      192,  192,  192,  601,  192,  602,  192,  603,  606, 1049,
      192,  701,  609,  192,  192,  702,  192,  605,  608,  604,
      192,  192,  192,  703,  192,  607,  192,  192, 1049,  192,
      192,  192,  192,  612,  192,  606,  192,  192,  611,  609,
      192,  192,  192,  610,  614,  608,  192,  615,  613,  192,
      703,  192, 1049,  192, 1049,  617,  192,  192,  192,  192,
      612,  192,  192,  192,  192,  611,  192,  192,  619,  192,
      610,  614,  192,  192,  615,  613,  192,  620,  192,  616,
      192,  192,  617,  192,  192,  192, 1049,  618,  192,  192,

      621,  192,  192,  192,  192,  619,  192, 1049,  622,  192,
      192,  192,  192,  192,  620,  192,  616, 1049,  192,  704,
      192,  192,  705,  192,  618,  192,  623,  621,  192,  192,
      192,  627,  192,  192,  192,  622,  625,  192,  192,  192,
      628,  624,  626,  192,  192,  629,  704,  192,  192,  705,
      192,  192, 1049,  623,  192,  192, 1049,  192,  627,  192,
      706,  192,  707,  625,  192,  192,  192,  628,  624,  626,
      192,  192,  629, 1049,  630,  192,  192,  632,  192,  192,
      192,  192,  192,  631,  708,  634,  192,  706, 1049,  707,
      709,  192,  192,  192,  192,  633,  192, 1049,  635,  192,

      192,  630,  192,  192,  632, 1049,  192,  192, 1049,  192,
      631,  708,  634,  192,  192,  192,  192,  709,  192,  192,
      641,  192,  633,  192,  639,  635,  192,  192,  642,  192,
      636,  637,  638,  643,  192,  192,  192, 1049,  192,  192,
      192,  192,  192,  192,  640,  192,  192,  641,  192, 1049,
      192,  639,  192,  192,  192,  642,  649,  636,  637,  638,
      643,  192,  192,  192,  644,  192,  192,  192,  646,  192,
      192,  640,  192,  192,  645,  192,  192,  192,  647,  192,
      192,  192,  192,  649,  192,  710,  650, 1049,  648,  192,
      652,  644,  711,  192,  192,  646,  192,  192, 1049,  192,

      192,  645,  192,  192,  712,  647,  651,  192,  192,  192,
      653,  192,  710,  650,  192,  648,  192,  652, 1049,  711,
      192,  192,  192,  192,  654,  192,  192,  192,  192,  192,
     1049,  712,  713,  651,  192,  192, 1049,  653, 1049,  655,
      656,  192,  192,  192,  192,  192,  192, 1049,  192,  192,
      192,  654,  192,  192,  192,  192,  192,  661, 1049,  713,
      657,  659,  662,  658,  192,  192,  655,  656,  192,  192,
      192,  192,  192,  192,  663,  192,  192,  192,  192,  660,
     1049,  714,  192,  192,  661,  192, 1049,  657,  659,  662,
      658,  192,  192,  192,  667,  192,  192, 1049,  192,  671,

     1049,  663,  664,  192,  192,  192,  660,  665,  714,  192,
      192,  668,  192,  192,  192,  192,  192, 1049,  666,  192,
      192,  667, 1049,  192,  192,  192,  671,  673,  192,  664,
      192,  670, 1049,  192,  665,  192, 1049,  192,  668,  669,
      192,  192,  192,  192,  192,  666,  192,  192,  192,  192,
      192,  192,  192,  192,  673,  192, 1049,  192,  670,  672,
      192, 1049,  192,  192,  192, 1049,  669,  675,  674,  192,
      192,  192,  192,  715,  192,  192,  192,  192,  676,  192,
      192,  192,  192,  192,  192, 1049,  672,  716,  677,  717,
      192,  192,  192,  678,  675,  674,  192,  192,  681,  192,

      715,  192,  192,  192,  192,  676, 1049,  679,  192,  192,
      192,  192,  192,  680,  716,  677,  717,  682,  192,  192,
      678, 1049,  192,  192,  192,  681,  683, 1049,  192,  192,
      192,  192,  686,  690,  679,  192,  192,  192,  192,  192,
      680,  718,  192,  687,  682,  192,  684,  192,  685,  192,
      192,  192,  192,  683,  689,  192,  192, 1049,  192,  686,
      690,  688,  192,  192,  192,  192,  192,  192,  718,  192,
      687, 1049,  192,  684,  192,  685,  192,  192, 1049,  192,
      695,  689,  192,  192,  691,  192,  192,  719,  688,  192,
      720,  692,  192,  192,  192,  721,  192,  192,  693,  192,

      722,  723,  694,  192,  192,  696,  724,  695,  725,  192,
      726,  691,  192,  192,  719,  727,  192,  720,  692,  192,
      728,  729,  721,  192,  192,  693,  730,  722,  723,  694,
      731,  732,  696,  724,  733,  725,  192,  726,  735,  192,
      736,  737,  727,  738,  741,  734,  742,  728,  729,  739,
      740,  743,  744,  730,  745,  746,  747,  731,  732,  748,
      749,  733,  750,  751,  752,  735,  753,  736,  737,  754,
      738,  741,  734,  742,  755,  756,  739,  740,  743,  744,
      757,  745,  746,  747,  758,  759,  748,  749,  760,  750,
      751,  752,  761,  753,  762,  763,  754,  764,  765,  766,

      767,  755,  756,  768,  769,  770,  771,  757,  847, 1049,
     1049,  758,  759, 1049, 1049,  760,  192,  192,  192,  761,
     1049,  762,  763, 1049,  764,  765,  766,  767,  192,  772,
      768,  769,  770,  771,  192,  847,  192,  774,  775,  777,
      192,  773,  192,  192,  192,  192,  778,  776,  192, 1049,
      192,  192,  848, 1049,  192,  192,  772,  849, 1049,  192,
      192,  192,  192,  192,  774,  775,  777,  192,  773,  192,
      192,  192,  192,  778,  776,  192,  192,  192,  192,  848,
      779,  192,  192, 1049,  849,  192,  192,  192,  850,  192,
      192,  781,  192,  192, 1049,  780,  192,  192,  192,  192,

      783, 1049,  192,  192,  782,  192,  192,  779,  192,  192,
      192,  851,  192,  192,  852,  850,  192,  192,  781,  192,
      192,  785,  780,  192,  784,  853,  192,  783,  192,  192,
      786,  782,  192,  192,  192,  192,  192,  192,  851,  192,
      192,  852,  787,  192,  192,  192,  789,  192,  785,  788,
      192,  784,  853,  192,  192,  192, 1049,  786,  854,  192,
      855,  192, 1049,  192,  192,  192,  192,  192,  192,  787,
      192,  192,  192,  789,  192, 1049,  788,  192,  192,  790,
      192,  192, 1049,  796,  192,  854,  192,  855,  192,  791,
     1049,  192,  192,  856,  192,  192,  792,  192,  192,  793,

      192,  192,  192,  192,  192,  192,  790,  192,  794,  795,
      796,  192,  192,  192,  192,  192,  791,  797,  798, 1049,
      856,  192,  192,  792,  857,  192,  793,  192,  192,  192,
      192,  192,  192,  192,  192,  794,  795,  192,  192,  192,
      192,  192,  799,  192,  797,  798,  192,  192,  192,  192,
     1049,  857,  192,  858,  800, 1049,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  799,
      192,  801,  192,  192,  192, 1049,  192,  803,  802,  192,
      858,  800,  192,  192,  192,  192,  859,  192,  192,  192,
      192,  192, 1049,  192,  192,  192, 1049,  192,  801,  192,

      804, 1049,  192,  192,  803,  802,  192,  192,  192,  192,
      805,  192,  192,  859,  192,  192, 1049, 1049,  192,  806,
     1049,  807,  192,  192,  192,  808,  192,  804,  192,  192,
     1049,  192,  192,  192,  192,  192,  809,  805,  192,  192,
      192,  192,  192,  192,  192, 1049,  806,  810,  807,  192,
      192,  192,  808,  192,  860,  192,  192,  811,  192,  192,
      192,  192,  192,  809,  192,  192,  813,  192,  192,  192,
      192,  192,  812, 1049,  810, 1049,  192,  192,  192, 1049,
      192,  860,  192,  192,  811,  192,  192,  192,  192,  192,
      817,  192,  192,  813,  814,  815,  819,  192,  192,  812,

      192,  816,  192,  192,  192, 1049,  192,  192,  818,  192,
      192, 1049,  192,  192,  192, 1049,  192,  817,  192,  820,
      861,  814,  815,  819,  192,  192,  192,  192,  816,  192,
      192,  192,  192,  192,  192,  818,  192,  192,  823,  862,
      822,  192,  192,  192,  821,  192,  820,  861, 1049,  825,
      824,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  823,  862,  822,  826,  192,
      828,  821,  192,  830,  192,  192,  825,  824,  192,  192,
      192,  192,  192,  192,  192,  827,  192,  192,  831,  192,
      192,  192,  192, 1049,  829,  826,  192,  828,  832,  192,

      830,  192,  192, 1049,  192, 1049,  192,  192,  833,  834,
      192,  192,  827,  192,  192,  831,  192,  192,  192,  192,
      192,  829,  192,  192,  192,  832,  863, 1049,  192,  192,
      835,  192,  192,  192,  192,  833,  834,  192,  864, 1049,
      192,  192,  192,  192,  865,  192,  836,  192,  192,  192,
      192,  192,  192,  863,  192,  192,  192,  835,  837,  192,
      192,  192, 1049,  838,  840,  864,  839,  192,  192,  192,
      192,  865,  843,  836,  192,  192, 1049,  192,  866,  192,
      192,  192,  192,  192,  842,  837,  192,  192,  192,  844,
      838,  840,  192,  839,  192,  192,  867,  192,  841,  843,

      868,  192,  192,  192,  192,  866,  192,  192,  192,  192,
      192,  842,  846,  192,  192,  192,  844,  192,  192,  192,
      845,  192,  869,  867,  192,  841,  870,  868,  192,  192,
      192,  192,  192,  192,  871,  192,  872,  192,  192,  846,
      873,  192,  874,  875,  192,  192,  876,  845,  877,  869,
      878,  192,  879,  870,  880,  192,  881,  882,  883,  192,
      884,  871,  885,  872,  192,  192,  886,  873,  887,  874,
      875,  888,  889,  876,  890,  877,  891,  878,  892,  879,
      893,  880,  894,  881,  882,  883,  895,  884,  896,  885,
      897,  898,  899,  886,  192,  887,  192, 1049,  888,  889,

      192,  890,  901,  891,  192,  892,  902,  893,  953,  894,
     1049,  903,  192,  895,  192,  896,  192,  897,  898,  899,
      192,  192,  192,  192,  192,  900,  192,  192,  192,  901,
      192,  192,  192,  902,  906,  953,  192,  904,  903,  192,
      905,  192, 1049,  192, 1049,  909,  192,  192,  192,  192,
      192,  192,  900,  192,  192,  192,  192,  192,  192,  192,
      912,  906,  192,  192,  904,  192,  192,  905,  907,  908,
      192,  192,  909,  192,  913,  192, 1049,  192,  192,  911,
      192,  192,  192,  192,  192,  192,  910,  912,  192,  192,
      192,  192,  192,  192,  192,  907,  908,  192,  192,  914,

      192,  913,  954,  915,  192,  192,  911,  192,  192,  192,
     1049,  192,  192,  910,  916,  192,  917,  192,  192,  955,
      192,  192,  918, 1049,  192,  192,  914,  192,  192,  954,
      915,  192,  192,  192,  192,  192,  919,  192, 1049,  192,
      920,  916,  192,  917,  192,  192,  955,  192,  192,  918,
      192,  192,  192,  192,  192,  192,  192,  192,  921,  192,
      192,  192,  192,  919,  192,  923,  192,  920,  192,  192,
      192,  192,  192, 1049,  192,  192,  192,  192,  925,  922,
      192,  192,  956,  192,  192,  921,  192,  192,  192,  192,
      192,  192,  923,  192,  192,  192,  192,  192,  192, 1049,

      192,  192,  924,  192,  926,  925,  922,  192,  192,  956,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  927,
      192,  192,  928,  192,  192,  192,  929,  192,  192,  924,
      192,  926,  192, 1049,  192,  192,  957,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  927,  192,  930,  928,
      192,  192, 1049,  929,  192,  192,  931,  192,  932,  192,
      192,  192, 1049,  957,  935,  192,  192,  192,  192,  192,
      936,  192,  192, 1049,  192,  930,  192,  192,  192,  933,
      192,  192, 1049,  931,  192,  932,  192,  192,  192,  934,
      192,  935,  192,  192,  192,  938,  192,  936,  937,  192,

      192,  192, 1049,  192, 1049,  192,  933,  192,  939,  192,
      958,  192,  959,  192,  192,  960,  934,  192,  192,  192,
      192,  192,  938,  192, 1049,  937,  192,  192,  942,  192,
      941,  192,  192,  940,  943,  939,  192,  958,  192,  959,
      192,  192,  960,  961,  192,  192,  192,  192,  192,  192,
      946,  192,  192,  947,  192,  942,  192,  941,  192,  192,
      940,  943,  944,  945,  192,  192,  949,  192,  192,  192,
      961,  192,  192,  192,  192,  192,  192,  946,  192,  192,
      947,  192,  948,  192,  192, 1049,  192,  192,  962,  944,
      945,  192,  192,  949,  963,  192,  192,  964,  950,  192,

      192,  192,  951,  192,  192, 1049,  192,  192,  952,  948,
      192,  192,  192,  192,  192,  962,  965,  966,  967,  192,
      968,  963,  969,  970,  964,  950,  192,  971,  972,  951,
      192,  192,  192,  192,  192,  952,  973,  974,  975,  192,
      976,  977,  978,  965,  966,  967,  979,  968,  980,  969,
      970,  981,  982,  192,  971,  972,  192,  192, 1049,  192,
      984, 1049,  192,  973,  974,  975,  983,  976,  977,  978,
     1011,  192,  192,  979,  192,  980,  192,  192,  981,  982,
      192,  986,  192,  192,  192,  985,  192,  984,  987,  192,
      192,  192, 1049,  983,  192, 1049,  192, 1011,  192,  192,

      192,  192, 1012,  192,  192,  192,  192,  192,  986,  192,
      192,  988,  985,  192,  192,  987,  192,  192,  192,  192,
      192,  192,  989,  192,  192,  192, 1049,  192,  990, 1012,
      192, 1049,  192,  192,  192, 1049,  192,  192,  988,  192,
     1049,  192,  192,  192,  192,  991,  192,  192,  192,  989,
      192,  192,  192,  192,  192,  990,  192,  192,  192,  192,
     1049,  192,  192,  192,  192, 1049,  192,  993,  992,  192,
      192,  192,  991,  192,  192,  192, 1013,  192,  192,  994,
      192,  192, 1049,  192,  192,  192,  192,  996,  192,  192,
      192,  192,  192, 1049,  993,  992,  192,  192,  998, 1049,

      192,  192,  192, 1013,  192,  192,  994,  192,  192,  995,
     1000,  192,  192,  192,  996,  192,  192,  192,  192,  192,
      997, 1049,  192,  192,  192,  998,  192, 1049,  192,  192,
      192,  192, 1049,  192,  192,  192,  995, 1000, 1001,  192,
      192,  999, 1003,  192,  192,  192,  192,  997,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192, 1002,
      192, 1049,  192, 1049,  192, 1001, 1004, 1014,  999, 1003,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192, 1006,  192, 1002, 1005,  192,  192,
      192,  192, 1007, 1004, 1014, 1049,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192, 1006, 1049, 1008, 1005,  192,  192,  192,  192, 1007,
     1015,  192,  192,  192,  192,  192,  192,  192, 1016,  192,
     1017,  192,  192,  192, 1009,  192, 1018,  192, 1019, 1010,
     1008,  192, 1020,  192,  192,  192, 1049, 1015,  192,  192,
      192,  192,  192,  192,  192, 1016,  192, 1017,  192,  192,
     1049, 1009,  192, 1018,  192, 1019, 1010, 1031,  192, 1020,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
     1021,  192,  192,  192,  192,  192,  192, 1022,  192,  192,
      192,  192,  192,  192, 1031,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192, 1021,  192,  192,
      192,  192, 1025,  192, 1022,  192,  192,  192,  192,  192,
      192,  192,  192,  192, 1023,  192,  192,  192, 1026,  192,
      192,  192,  192,  192, 1024,  192, 1032,  192,  192, 1025,
     1049,  192,  192,  192, 1030,  192,  192,  192,  192,  192,
      192, 1023,  192,  192,  192, 1026,  192,  192,  192,  192,
      192, 1024,  192, 1032,  192,  192, 1033, 1027,  192,  192,
      192, 1030,  192,  192,  192,  192,  192,  192,  192,  192,
      192, 1034, 1035, 1028, 1036,  192, 1029,  192, 1049,  192,
      192,  192,  192, 1033, 1027,  192, 1049,  192,  192,  192,

      192,  192,  192,  192, 1049,  192, 1040,  192, 1034, 1035,
     1028, 1036,  192, 1029,  192, 1037, 1038,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192, 1039,  192, 1040,  192, 1043, 1044, 1045,  192,  192,
     1042,  192, 1037, 1038, 1041,  192, 1046,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192, 1049, 1039,  192,
      192,  192, 1043, 1044, 1045,  192,  192, 1042,  192, 1047,
      192, 1041,  192, 1046,  192,  192,  192, 1049,  192,  192,
      192,  192,  192,  192, 1048, 1049, 1049,  192,  192, 1049,
      192, 1049,  192,  192, 1049,  192, 1047,  192,  192,  192,

     1049,  192,  192,  192, 1049,  192, 1049,  192, 1049, 1049,
      192, 1048, 1049, 1049, 1049,  192, 1049,  192, 1049,  192,
     1049, 1049, 1049, 1049, 1049,  192, 1049, 1049, 1049, 1049,
      192,   46,   46,   46,   46,   46,   88, 1049, 1049,   88,
       88,  178,  178,  178, 1049,  178,  180, 1049,  180,  180,
      180,  183, 1049,  183,  183,  183,  192, 1049,  192,  192,
      192,    7, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049
    } ;

static const flex_int16_t yy_chk[4230] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1052,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  384,
       23,   30,   24,   21,  274,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   23,   25,
      187,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   23,   25,   28,   25,  186,

       27,   49,   49,   25,   42,   28,   27,  183,   25,   26,
       99,   28,   42,   50,   50,   57,   57,   26,   32,   55,
       26,   55,   32,   26,   28,  102,   26,   27,   32,   26,
       33,   42,   28,   27,   33,   29,   26,   99,   28,   42,
       33,   29,   29,   29,   26,   32,   92,   26,   29,   32,
       26,   34,  102,   26,   91,   32,   26,   33,   58,   58,
       38,   33,   29,   36,   38,   34,   88,   33,   29,   29,
       29,   34,   34,   35,   36,   29,   85,   41,   34,   41,
       36,   35,   41,   71,   39,   35,   39,   38,   35,   39,
       36,   38,   34,   43,   43,   60,   39,   39,   34,   34,

       35,   36,   59,   71,   41,   56,   41,   36,   35,   41,
       71,   39,   35,   39,   68,   35,   39,   70,   68,   52,
       43,   43,   68,   39,   39,   40,   40,   70,   68,   40,
       71,  103,   40,   40,   86,   86,  107,   70,   68,   40,
      110,   68,   40,   51,   70,   68,   90,   90,   47,   68,
      181,  181,   40,   40,   70,   68,   40,   45,  103,   40,
       40,  185,  185,  107,   70,   68,   40,  110,   20,   40,
       61,   61,   67,   61,   61,   61,   61,   61,   61,   67,
       61,   61,   61,   72,   77,   67,   61,   72,   61,  100,
      113,  113,   67,   72,   61,  106,   61,  100,   19,   67,

       61,   61,  106,   72,   77,   84,   67,  114,  115,   16,
       72,   77,   67,   61,   72,   61,  100,  113,  113,   67,
       72,   61,  106,   61,  100,   84,  116,   61,   61,  106,
       72,   77,   84,  117,  114,  115,   61,   62,   62,   11,
       62,   62,   62,   62,   62,   62,   73,   62,   62,   62,
       73,   76,   84,  116,   62,   76,   73,  118,  101,   78,
      117,  101,   76,   78,  120,  121,   73,   83,   76,    7,
       83,   83,    4,   73,   62,   76,    3,   73,   76,   78,
        0,   62,   76,   73,  118,  101,   78,   83,  101,   76,
       78,  120,  121,   73,   83,   76,   81,   83,   83,  104,

      122,   62,   76,   62,   63,   81,   78,   81,   63,  109,
       81,   63,  123,  104,   83,  108,   81,  108,   63,  109,
      111,   63,   63,   81,  124,  111,  104,  122,   63,    0,
        0,   63,   81,    0,   81,   63,  109,   81,   63,  123,
      104,    0,  108,   81,  108,   63,  109,  111,   63,   63,
       82,  124,  111,    0,   82,   63,   64,  112,   82,  119,
       64,  119,  112,  125,   64,  119,  126,  127,  112,  130,
       64,  132,  119,   64,   82,  112,  119,   82,    0,  128,
       64,   82,  128,   64,  112,   82,  119,   64,  119,  112,
      125,   64,  119,  126,  127,  112,  130,   64,  132,  119,

       64,   82,  112,  119,  133,  129,  128,   64,   65,  128,
      129,  135,  136,  137,  138,   65,  139,   65,  139,  141,
        0,  140,   65,  140,  142,  143,  144,   65,   65,    0,
        0,  133,  129,    0,  140,   65,    0,  129,  135,  136,
      137,  138,   65,  139,   65,  139,  141,  134,  140,   65,
      140,  142,  143,  144,   65,   65,   66,  134,  145,  146,
       66,  140,  134,  134,   66,  147,  148,   66,  150,  151,
       66,  152,  153,   66,  134,  154,   66,  156,    0,  154,
       66,    0,    0,   66,  134,  145,  146,   66,    0,  134,
      134,   66,  147,  148,   66,  150,  151,   66,  152,  153,

       66,    0,  154,   66,  156,  155,  154,   66,   69,   69,
      157,  159,  160,  155,  158,   69,   69,   69,  155,  161,
      162,  163,   69,  158,    0,  165,  166,  167,   69,    0,
      168,  158,  155,    0,    0,   69,   69,  157,  159,  160,
      155,  158,   69,   69,   69,  155,  161,  162,  163,   69,
      158,  164,  165,  166,  167,   69,   74,  168,  158,  170,
       74,  169,  164,  171,  169,  172,  173,  174,  175,  176,
       74,  172,    0,    0,  276,    0,   74,   74,  164,  173,
       74,    0,    0,   74,  278,  192,  170,   74,  169,  164,
      171,  169,  172,  173,  174,  175,  176,   74,  172,  193,

      193,  276,  197,   74,   74,  192,  173,   74,   75,   75,
      194,  278,  192,  279,  281,  197,  198,   75,  198,    0,
      193,   75,  197,    0,   75,  194,  193,  193,   75,  197,
      194,    0,  192,    0,    0,   75,   75,  194,  198,  195,
      279,  281,  197,  198,   75,  198,  195,  193,   75,  197,
      200,   75,  194,  283,  195,   75,   79,  194,   79,  195,
      196,   79,    0,  196,  196,  198,  195,    0,   79,   79,
      200,  284,  204,  195,  199,  199,  285,  200,   79,    0,
      283,  195,  204,   79,  196,   79,  195,  196,   79,  199,
      196,  196,  204,    0,  199,   79,   79,  200,  284,  204,

      202,  199,  199,  285,  202,   79,   80,   80,  201,  204,
       80,  196,  287,   80,   80,  201,  199,    0,    0,  204,
       80,  199,  201,   80,  202,    0,    0,  202,  201,    0,
       80,  202,    0,   80,   80,  201,  203,   80,  206,  287,
       80,   80,  201,  203,  205,  203,  208,   80,  288,  201,
       80,  202,  286,  206,  286,  201,  203,   80,  206,  208,
      208,  205,  209,  203,  205,  206,  208,    0,    0,    0,
      203,  205,  203,  208,  210,  288,    0,  289,  209,  286,
      206,  286,  209,  203,  210,  206,  208,  208,  205,  209,
      290,  205,  207,  208,  210,  215,  207,  207,  211,  212,

      212,  210,  215,  207,  289,  209,  213,    0,  213,  209,
      207,  210,  211,    0,    0,  215,  207,  290,  211,  207,
      212,  210,  215,  207,  207,  211,  212,  212,  213,  215,
      207,    0,  291,  213,  216,  213,  293,  207,  295,  211,
      217,  216,  215,  207,  218,  211,    0,  212,  296,    0,
      217,    0,    0,    0,  216,  213,  214,  218,  214,  291,
      217,  216,  214,  293,  218,  295,  219,  217,  216,  214,
      221,  218,  220,  214,  298,  296,  219,  217,  214,  220,
      221,  216,  299,  214,  218,  214,  219,  217,  222,  214,
      221,  218,  220,  219,    0,    0,  214,  221,  222,  220,

      214,  298,  224,  219,  223,  214,  220,  221,  222,  299,
      225,  224,  226,  219,    0,  222,  224,  221,  223,  220,
      300,  223,  224,    0,  223,  222,  225,    0,    0,  224,
      225,  223,  226,    0,    0,  222,  227,  225,  224,  226,
      227,  228,    0,  224,  232,  223,  230,  300,  223,  224,
      231,  223,  228,  225,  231,  230,  227,  225,  301,  226,
      237,  228,    0,  227,  232,    0,  230,  227,  228,  237,
      231,  232,    0,  230,  233,  233,  302,  231,    0,  228,
      237,  231,  230,  227,    0,  301,    0,  237,  228,  229,
      229,  232,  234,  230,  233,    0,  237,  231,  234,  229,

      234,  233,  233,  302,  229,  229,    0,  237,    0,  235,
      229,  235,  234,  235,  238,  236,  229,  229,    0,  234,
        0,  233,  235,  238,  303,  234,  229,  234,  236,  305,
        0,  229,  229,  235,  238,  236,  235,  229,  235,  234,
      235,  238,  236,  239,  240,  241,  243,  243,  244,  235,
      238,  303,  241,  242,    0,  236,  305,  242,  239,  240,
      235,  238,  236,  239,  240,  241,  243,  306,  244,  307,
      239,  240,  241,  243,  243,  244,    0,  242,  308,  241,
      242,  245,  245,  246,  242,  239,  240,  247,    0,    0,
      239,  240,  241,  243,  306,  244,  307,  248,  246,  309,

      247,  248,  245,  246,  242,  308,    0,  247,  245,  245,
      246,  249,  310,  311,  247,  249,  251,  252,  251,    0,
      252,  248,  312,  313,  248,  246,  309,  247,  248,  245,
      246,  249,  250,  250,  247,    0,  251,  252,  249,  310,
      311,  250,  249,  251,  252,  251,  250,  252,  248,  312,
      313,  254,  250,  253,  255,  253,    0,    0,  249,  250,
      250,  254,  253,  251,  252,  260,  314,  255,  250,    0,
      253,  254,  256,  250,  255,  253,  256,    0,  254,  250,
      253,  255,  253,  257,  258,  260,  257,  261,  254,  253,
      315,  258,  260,  314,  255,  261,  256,  253,  254,  256,

      259,  255,  253,  256,  258,  262,  257,  261,  259,  297,
      257,  258,  260,  257,  261,    0,  262,  315,  258,  259,
      259,  263,  261,  256,  297,  262,    0,  259,  265,  265,
        0,  258,  262,  257,  261,  259,  297,  263,  264,    0,
      266,  263,  264,  262,  266,  264,  259,  259,  263,  265,
      267,  297,  262,  268,  269,  265,  265,  267,  264,  316,
      266,  317,  318,  267,  263,  264,  268,  266,  263,  264,
      267,  266,  264,  268,  269,    0,  265,  267,  271,  270,
      268,  269,  271,  319,  267,  264,  316,  266,  317,  318,
      267,  320,  321,  268,  270,  322,  323,  267,  324,  270,

      268,  269,  271,  325,  326,  271,  270,  327,  328,  271,
      319,  330,  331,  333,  329,  334,  335,  336,  320,  321,
      337,  270,  322,  323,  329,  324,  270,  338,  339,  271,
      325,  326,  340,  341,  327,  328,  342,  344,  330,  331,
      333,  329,  334,  335,  336,  345,  346,  337,  347,  348,
      349,  329,  350,  351,  338,  339,  352,  353,  354,  340,
      341,  355,  356,  342,  344,  357,  358,  359,  361,  362,
      363,  364,  345,  346,  366,  347,  348,  349,  367,  350,
      351,  368,  369,  352,  353,  354,  373,  374,  355,  356,
      371,  375,  357,  358,  359,  361,  362,  363,  364,  371,

      372,  366,  372,  376,  377,  367,  378,  379,  368,  369,
      381,  380,  382,  373,  374,  380,  385,  371,  375,    0,
      386,  387,    0,    0,  388,  389,  371,  372,    0,  372,
      376,  377,  389,  378,  379,  390,  385,  381,  380,  382,
      386,  387,  380,  385,  388,  389,  391,  386,  387,  392,
      391,  388,  389,    0,  393,  390,  493,    0,  494,  389,
      394,    0,  390,  385,  393,  495,  496,  386,  387,  392,
      391,  388,  389,  391,  393,    0,  392,  391,  394,  395,
      394,  393,  390,  493,  398,  494,  395,  394,  396,  397,
      396,  393,  495,  496,  497,    0,  392,  391,  498,  395,

      398,  393,  397,  399,  398,  394,  395,  394,  400,  397,
      396,  398,  400,  395,  401,  396,  397,  396,  399,    0,
      402,  497,  403,  399,  404,  498,  395,  398,  401,  397,
      399,  398,  400,  500,  401,  400,  397,  396,    0,  400,
      402,  401,  403,  407,  404,  399,  405,  402,  406,  403,
      399,  404,  406,  405,  408,  401,  408,  409,  407,  400,
      500,  401,    0,  407,    0,  411,  405,  402,  411,  403,
      407,  404,  406,  405,  410,  406,  408,  409,  413,  406,
      405,  408,  414,  408,  409,  407,  412,  415,  411,  410,
      407,  415,  411,  405,  410,  411,    0,  412,  413,  406,

      416,  410,  414,  408,  409,  413,  412,    0,  417,  414,
      417,  415,  418,  412,  415,  411,  410,    0,  415,  503,
      416,  410,  504,  420,  412,  413,  418,  416,  421,  414,
      417,  422,  418,  412,  419,  417,  420,  417,  415,  418,
      423,  419,  421,  420,  423,  424,  503,  416,  421,  504,
      420,  422,    0,  418,  419,  421,    0,  417,  422,  418,
      505,  419,  506,  420,  423,  424,  425,  423,  419,  421,
      420,  423,  424,    0,  425,  421,  426,  427,  422,  428,
      427,  419,  429,  426,  508,  429,  425,  505,    0,  506,
      509,  423,  424,  425,  430,  428,  426,    0,  430,  428,

      427,  425,  429,  426,  427,    0,  428,  427,    0,  429,
      426,  508,  429,  425,  430,  431,  432,  509,  434,  433,
      436,  430,  428,  426,  434,  430,  428,  427,  437,  429,
      431,  432,  433,  438,  435,  431,  432,    0,  434,  433,
      436,  430,  431,  432,  435,  434,  433,  436,  437,    0,
      442,  434,  440,  438,  435,  437,  444,  431,  432,  433,
      438,  435,  431,  432,  439,  434,  433,  436,  440,  441,
      442,  435,  440,  443,  439,  437,  444,  442,  441,  440,
      438,  435,  445,  444,  439,  510,  445,    0,  443,  441,
      447,  439,  511,  443,  447,  440,  441,  442,    0,  440,

      443,  439,  445,  444,  513,  441,  446,  446,  448,  445,
      448,  439,  510,  445,  447,  443,  441,  447,    0,  511,
      443,  447,  449,  450,  449,  451,  453,  446,  448,  445,
        0,  513,  514,  446,  446,  448,    0,  448,    0,  450,
      451,  447,  449,  450,  452,  451,  453,    0,  455,  449,
      450,  449,  451,  453,  446,  448,  454,  457,    0,  514,
      452,  455,  458,  454,  452,  456,  450,  451,  455,  449,
      450,  452,  451,  453,  459,  455,  454,  457,  459,  456,
        0,  515,  458,  454,  457,  456,    0,  452,  455,  458,
      454,  452,  456,  460,  463,  455,  461,    0,  459,  467,

        0,  459,  460,  454,  457,  459,  456,  461,  515,  458,
      462,  464,  456,  460,  463,  464,  461,    0,  462,  467,
      460,  463,    0,  461,  465,  459,  467,  469,  466,  460,
      462,  466,    0,  470,  461,  464,    0,  462,  464,  465,
      460,  463,  464,  461,  465,  462,  467,  469,  466,  468,
      471,  465,  472,  470,  469,  466,    0,  462,  466,  468,
      470,    0,  464,  473,  475,    0,  465,  472,  471,  468,
      471,  465,  472,  518,  469,  466,  468,  471,  473,  472,
      470,  474,  476,  473,  475,    0,  468,  519,  474,  520,
      473,  475,  477,  476,  472,  471,  468,  471,  479,  472,

      518,  474,  476,  480,  478,  473,    0,  477,  474,  476,
      473,  475,  477,  478,  519,  474,  520,  481,  479,  477,
      476,    0,  483,  480,  478,  479,  481,    0,  474,  476,
      480,  478,  483,  487,  477,  487,  482,  481,  486,  477,
      478,  521,  483,  484,  481,  479,  482,  484,  482,  483,
      480,  478,  485,  481,  486,  487,  482,    0,  486,  483,
      487,  485,  487,  482,  481,  486,  488,  484,  521,  483,
      484,    0,  485,  482,  484,  482,  489,  491,    0,  485,
      491,  486,  487,  482,  488,  486,  488,  522,  485,  490,
      523,  489,  492,  488,  484,  524,  489,  491,  490,  485,

      526,  527,  490,  489,  491,  492,  530,  491,  531,  490,
      533,  488,  492,  488,  522,  535,  490,  523,  489,  492,
      537,  538,  524,  489,  491,  490,  539,  526,  527,  490,
      540,  541,  492,  530,  542,  531,  490,  533,  544,  492,
      548,  550,  535,  552,  554,  542,  555,  537,  538,  553,
      553,  557,  558,  539,  559,  560,  561,  540,  541,  563,
      564,  542,  565,  566,  567,  544,  568,  548,  550,  569,
      552,  554,  542,  555,  570,  571,  553,  553,  557,  558,
      573,  559,  560,  561,  574,  575,  563,  564,  576,  565,
      566,  567,  579,  568,  581,  582,  569,  583,  584,  585,

      586,  570,  571,  587,  588,  590,  592,  573,  699,    0,
        0,  574,  575,    0,    0,  576,  595,  597,  598,  579,
        0,  581,  582,    0,  583,  584,  585,  586,  596,  595,
      587,  588,  590,  592,  599,  699,  595,  597,  598,  600,
      601,  596,  603,  595,  597,  598,  602,  599,  596,    0,
      602,  604,  701,    0,  599,  596,  595,  702,    0,  600,
      601,  599,  603,  595,  597,  598,  600,  601,  596,  603,
      602,  604,  605,  602,  599,  596,  607,  602,  604,  701,
      605,  599,  606,    0,  702,  609,  600,  601,  703,  603,
      608,  607,  605,  610,    0,  606,  607,  602,  604,  605,

      610,    0,  606,  607,  608,  609,  612,  605,  611,  606,
      608,  704,  609,  610,  705,  703,  614,  608,  607,  605,
      610,  612,  606,  607,  611,  706,  612,  610,  611,  606,
      613,  608,  609,  612,  613,  611,  614,  608,  704,  617,
      610,  705,  615,  614,  615,  616,  617,  618,  612,  616,
      619,  611,  706,  612,  613,  611,    0,  613,  708,  617,
      709,  613,    0,  614,  615,  616,  617,  618,  620,  615,
      619,  615,  616,  617,  618,    0,  616,  619,  621,  620,
      622,  613,    0,  626,  623,  708,  617,  709,  620,  621,
        0,  615,  616,  710,  618,  620,  622,  619,  621,  623,

      622,  627,  628,  626,  623,  621,  620,  622,  624,  625,
      626,  623,  624,  625,  629,  620,  621,  628,  629,    0,
      710,  627,  628,  622,  712,  621,  623,  622,  627,  628,
      626,  623,  624,  625,  629,  624,  625,  630,  631,  624,
      625,  629,  632,  633,  628,  629,  632,  634,  627,  628,
        0,  712,  636,  713,  633,    0,  638,  630,  631,  624,
      625,  629,  635,  633,  630,  631,  632,  634,  637,  632,
      633,  635,  636,  632,  634,    0,  638,  639,  637,  636,
      713,  633,  635,  638,  630,  631,  714,  640,  637,  635,
      633,  641,    0,  632,  634,  637,    0,  639,  635,  636,

      640,    0,  645,  638,  639,  637,  642,  640,  643,  635,
      641,  641,  647,  714,  640,  637,    0,    0,  641,  642,
        0,  643,  645,  644,  639,  644,  642,  640,  643,  645,
        0,  648,  647,  642,  640,  643,  644,  641,  641,  647,
      646,  649,  650,  644,  651,    0,  642,  646,  643,  645,
      644,  648,  644,  642,  715,  643,  653,  650,  648,  647,
      646,  649,  650,  644,  651,  652,  654,  646,  649,  650,
      644,  651,  652,    0,  646,    0,  653,  657,  648,    0,
      655,  715,  658,  653,  650,  652,  654,  646,  649,  650,
      657,  651,  652,  654,  655,  655,  660,  657,  656,  652,

      655,  656,  658,  653,  657,    0,  661,  655,  659,  658,
      659,    0,  652,  654,  664,    0,  660,  657,  656,  661,
      716,  655,  655,  660,  657,  656,  661,  655,  656,  658,
      659,  662,  663,  661,  664,  659,  667,  659,  665,  717,
      663,  664,  665,  660,  662,  656,  661,  716,    0,  667,
      666,  662,  663,  661,  666,  670,  667,  659,  662,  663,
      668,  664,  665,  667,  672,  665,  717,  663,  668,  665,
      670,  662,  669,  672,  666,  670,  667,  666,  662,  663,
      668,  666,  670,  667,  672,  669,  671,  668,  673,  665,
      673,  672,  669,    0,  671,  668,  674,  670,  675,  669,

      672,  666,  670,    0,  676,    0,  671,  668,  676,  677,
      673,  672,  669,  671,  679,  673,  674,  673,  675,  669,
      678,  671,  680,  674,  676,  675,  718,    0,  682,  677,
      678,  676,  681,  671,  679,  676,  677,  673,  719,    0,
      678,  679,  680,  674,  720,  675,  681,  678,  682,  680,
      685,  676,  681,  718,  684,  682,  677,  678,  683,  681,
      683,  679,    0,  684,  686,  719,  685,  678,  686,  680,
      685,  720,  689,  681,  684,  682,    0,  685,  723,  681,
      683,  684,  688,  687,  688,  683,  690,  683,  686,  690,
      684,  686,  689,  685,  691,  686,  724,  685,  687,  689,

      726,  684,  688,  687,  692,  723,  690,  683,  693,  688,
      687,  688,  694,  690,  691,  686,  690,  695,  696,  689,
      692,  691,  727,  724,  692,  687,  729,  726,  693,  688,
      687,  692,  694,  690,  732,  693,  733,  695,  696,  694,
      734,  691,  735,  740,  695,  696,  742,  692,  743,  727,
      744,  692,  747,  729,  748,  693,  749,  750,  751,  694,
      752,  732,  754,  733,  695,  696,  755,  734,  756,  735,
      740,  757,  758,  742,  759,  743,  760,  744,  761,  747,
      762,  748,  764,  749,  750,  751,  765,  752,  766,  754,
      768,  769,  770,  755,  772,  756,  773,    0,  757,  758,

      775,  759,  776,  760,  774,  761,  777,  762,  847,  764,
        0,  778,  778,  765,  772,  766,  773,  768,  769,  770,
      775,  772,  776,  773,  774,  774,  777,  775,  779,  776,
      780,  774,  778,  777,  781,  847,  782,  779,  778,  778,
      780,  772,    0,  773,    0,  785,  786,  775,  779,  776,
      780,  774,  774,  777,  781,  779,  782,  780,  783,  778,
      789,  781,  784,  782,  779,  785,  786,  780,  783,  784,
      788,  787,  785,  786,  790,  779,    0,  780,  783,  788,
      789,  781,  784,  782,  791,  783,  787,  789,  792,  784,
      788,  787,  785,  786,  790,  783,  784,  788,  787,  791,

      793,  790,  849,  792,  791,  783,  788,  789,  792,  784,
        0,  791,  794,  787,  793,  792,  794,  788,  787,  850,
      793,  790,  795,    0,  795,  796,  791,  793,  797,  849,
      792,  791,  794,  799,  798,  792,  798,  800,    0,  794,
      799,  793,  803,  794,  795,  796,  850,  793,  797,  795,
      804,  795,  796,  799,  798,  797,  801,  800,  801,  794,
      799,  798,  803,  798,  800,  804,  802,  799,  805,  803,
      804,  795,  796,    0,  806,  797,  801,  804,  808,  802,
      799,  798,  851,  801,  800,  801,  802,  807,  805,  803,
      809,  811,  804,  802,  806,  805,  812,  804,  808,    0,

      813,  806,  807,  801,  809,  808,  802,  807,  814,  851,
      809,  811,  810,  802,  807,  805,  812,  809,  811,  810,
      813,  806,  815,  812,  816,  808,  817,  813,  814,  807,
      817,  809,  810,    0,  807,  814,  852,  809,  811,  810,
      820,  819,  815,  812,  816,  818,  810,  813,  818,  815,
      817,  816,    0,  817,  821,  814,  819,  817,  822,  810,
      820,  819,    0,  852,  825,  818,  823,  820,  819,  815,
      826,  816,  818,    0,  821,  818,  824,  817,  822,  823,
      828,  821,    0,  819,  825,  822,  823,  820,  819,  824,
      826,  825,  818,  823,  827,  829,  824,  826,  827,  829,

      828,  821,    0,  824,    0,  822,  823,  828,  830,  830,
      854,  825,  855,  823,  827,  858,  824,  826,  831,  829,
      834,  827,  829,  824,    0,  827,  829,  828,  833,  830,
      832,  832,  833,  831,  834,  830,  830,  854,  831,  855,
      834,  827,  858,  862,  838,  831,  829,  834,  836,  835,
      837,  832,  833,  839,  837,  833,  830,  832,  832,  833,
      831,  834,  835,  836,  838,  831,  841,  834,  836,  835,
      862,  838,  842,  839,  837,  836,  835,  837,  832,  833,
      839,  837,  840,  840,  843,    0,  841,  846,  864,  835,
      836,  838,  842,  841,  865,  836,  835,  866,  843,  842,

      839,  837,  844,  840,  843,    0,  844,  846,  845,  840,
      840,  843,  845,  841,  846,  864,  869,  872,  873,  842,
      876,  865,  877,  879,  866,  843,  844,  880,  881,  844,
      840,  843,  845,  844,  846,  845,  882,  884,  885,  845,
      889,  891,  892,  869,  872,  873,  893,  876,  898,  877,
      879,  899,  900,  844,  880,  881,  901,  902,    0,  845,
      903,    0,  906,  882,  884,  885,  902,  889,  891,  892,
      958,  904,  900,  893,  905,  898,  901,  902,  899,  900,
      903,  905,  906,  901,  902,  904,  909,  903,  907,  906,
      907,  904,    0,  902,  905,    0,  908,  958,  904,  900,

      910,  905,  960,  901,  902,  912,  909,  903,  905,  906,
      907,  908,  904,  909,  913,  907,  908,  907,  904,  914,
      910,  905,  911,  908,  911,  912,    0,  910,  915,  960,
      916,    0,  912,  909,  913,    0,  917,  907,  908,  914,
        0,  913,  920,  908,  911,  917,  914,  910,  915,  911,
      916,  911,  912,  918,  921,  915,  917,  916,  919,  922,
        0,  913,  920,  917,  923,    0,  914,  919,  918,  920,
      924,  911,  917,  918,  921,  915,  967,  916,  919,  922,
      918,  921,    0,  917,  923,  919,  922,  926,  927,  920,
      924,  923,  928,    0,  919,  918,  925,  924,  930,    0,

      918,  921,  930,  967,  931,  919,  922,  926,  927,  925,
      933,  923,  928,  929,  926,  927,  925,  924,  934,  928,
      929,    0,  930,  925,  931,  930,  932,    0,  936,  930,
      933,  931,    0,  929,  926,  927,  925,  933,  934,  928,
      929,  932,  937,  925,  937,  934,  932,  929,  936,  930,
      935,  931,  938,  932,  939,  936,  940,  933,  941,  935,
      929,    0,  943,    0,  937,  934,  938,  969,  932,  937,
      935,  937,  938,  932,  939,  936,  940,  935,  941,  938,
      942,  939,  943,  940,  944,  941,  935,  942,  944,  943,
      947,  937,  945,  938,  969,    0,  945,  935,  946,  938,

      942,  939,  948,  940,  949,  941,  950,  942,  944,  943,
      947,  944,    0,  946,  942,  944,  945,  947,  946,  945,
      970,  951,  948,  945,  949,  946,  950,  942,  973,  948,
      974,  949,  952,  950,  951,  944,  977,  947,  978,  952,
      946,  951,  979,  945,  982,  946,    0,  970,  951,  948,
      983,  949,  952,  950,  984,  973,  985,  974,  986,  952,
        0,  951,  988,  977,  982,  978,  952, 1011,  951,  979,
      983,  982,  989,  990,  984,  991,  985,  983,  986,  952,
      987,  984,  988,  985,  987,  986,  992,  989,  993,  988,
      994,  982,  989,  990, 1011,  991,  995,  983,  997,  989,

      990,  984,  991,  985,  987,  986,  992,  987,  993,  988,
      994,  987,  999,  992,  989,  993,  995,  994,  997,  989,
      990,  998,  991,  995,  996,  997,  996, 1000, 1002, 1001,
     1002,  987,  999,  992,  998,  993, 1013,  994, 1004,  999,
        0,  998, 1005,  995, 1008,  997,  996, 1000,  998, 1001,
     1002,  996, 1003,  996, 1000, 1002, 1001, 1002, 1004,  999,
     1009,  998, 1005, 1013, 1008, 1004, 1015, 1003,  998, 1005,
     1006, 1008, 1003,  996, 1000, 1010, 1001, 1002, 1007, 1003,
     1009, 1016, 1018, 1006, 1019, 1004, 1007, 1009,    0, 1005,
     1006, 1008, 1022, 1015, 1003, 1010,    0, 1006, 1007, 1003,

     1021, 1023, 1010, 1024,    0, 1007, 1026, 1009, 1016, 1018,
     1006, 1019, 1022, 1007, 1027, 1021, 1023, 1006, 1025, 1022,
     1021, 1023, 1010, 1024, 1028, 1007, 1026, 1021, 1023, 1029,
     1024, 1025, 1030, 1026, 1027, 1031, 1033, 1034, 1025, 1022,
     1029, 1027, 1021, 1023, 1028, 1025, 1037, 1021, 1023, 1029,
     1024, 1028, 1030, 1026, 1038, 1039, 1029,    0, 1025, 1030,
     1041, 1027, 1031, 1033, 1034, 1025, 1037, 1029, 1042, 1039,
     1040, 1028, 1046, 1037, 1038, 1039, 1029,    0, 1047, 1030,
     1041, 1038, 1039, 1048, 1040,    0,    0, 1041, 1042,    0,
     1040,    0, 1046, 1037,    0, 1042, 1039, 1040, 1047, 1046,

        0, 1038, 1039, 1048,    0, 1047,    0, 1041,    0,    0,
     1048, 1040,    0,    0,    0, 1042,    0, 1040,    0, 1046,
        0,    0,    0,    0,    0, 1047,    0,    0,    0,    0,
     1048, 1050, 1050, 1050, 1050, 1050, 1051,    0,    0, 1051,
     1051, 1053, 1053, 1053,    0, 1053, 1054,    0, 1054, 1054,
     1054, 1055,    0, 1055, 1055, 1055, 1056,    0, 1056, 1056,
     1056, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static std::stringstream strbuf;

#line 1952 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1966 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2253 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1050 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1049 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(REFERENCES)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(FOREIGN)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 144:
#line 208 "flex_lexer.l"
case 145:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 233 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3094 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1050 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1050 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1049);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 238 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

